/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     SIZE = SIZE
*/
module rca_1 (
    input [7:0] a,
    input [7:0] b,
    input cin,
    output reg cout,
    output reg [7:0] s
  );
  
  localparam SIZE = 4'h8;
  
  
  wire [(4'h8+0)-1:0] M_fa_s;
  wire [(4'h8+0)-1:0] M_fa_cout;
  reg [(4'h8+0)-1:0] M_fa_a;
  reg [(4'h8+0)-1:0] M_fa_b;
  reg [(4'h8+0)-1:0] M_fa_cin;
  
  genvar GEN_fa0;
  generate
  for (GEN_fa0=0;GEN_fa0<4'h8;GEN_fa0=GEN_fa0+1) begin: fa_gen_0
    fa_3 fa (
      .a(M_fa_a[GEN_fa0*(1)+(1)-1-:(1)]),
      .b(M_fa_b[GEN_fa0*(1)+(1)-1-:(1)]),
      .cin(M_fa_cin[GEN_fa0*(1)+(1)-1-:(1)]),
      .s(M_fa_s[GEN_fa0*(1)+(1)-1-:(1)]),
      .cout(M_fa_cout[GEN_fa0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  integer i;
  
  always @* begin
    M_fa_a = a;
    M_fa_b = b;
    for (i = 1'h0; i < 4'h8; i = i + 1) begin
      if (i == 1'h0) begin
        M_fa_cin[0+0-:1] = cin;
      end else begin
        M_fa_cin[(i)*1+0-:1] = M_fa_cout[(i - 1'h1)*1+0-:1];
      end
    end
    cout = M_fa_cout[7+0-:1];
    s = M_fa_s;
  end
endmodule
